[{"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\reportWebVitals.js":"1","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\App.js":"2","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\Header.js":"3","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\index.js":"4","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\Mainboard.js":"5","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\Pin.js":"6","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\firebase.js":"7","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\api\\unsplash.js":"8"},{"size":362,"mtime":1608062153187,"results":"9","hashOfConfig":"10"},{"size":2035,"mtime":1611727165513,"results":"11","hashOfConfig":"10"},{"size":2194,"mtime":1611720008042,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1608062153187,"results":"13","hashOfConfig":"10"},{"size":337,"mtime":1611726551570,"results":"14","hashOfConfig":"10"},{"size":439,"mtime":1611723167670,"results":"15","hashOfConfig":"10"},{"size":739,"mtime":1611719197146,"results":"16","hashOfConfig":"10"},{"size":277,"mtime":1611726216241,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"24r828",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\reportWebVitals.js",[],["36","37"],"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\App.js",["38","39","40","41"],"import \"./App.css\";\nimport Header from \"./Header.js\";\nimport Mainboard from \"./Mainboard\";\nimport unsplash from \"./api/unsplash\";\nimport { useState, useEffect } from \"react\";\nimport db from \"./firebase\";\n\nfunction App() {\n  const [pins, setNewPins] = useState([]);\n\n  const makeAPICall = (term) => {\n    //make an API call\n    return unsplash.get(\"https://api.unsplash.com/search/photos\", {\n      params: { query: term },\n    });\n  };\n\n  const onSearchSubmit = (term) => {\n    // console.log(term, \"which term is here ? OLA\");\n    let promises = [];\n    let searchedPins = [];\n    promises.push(\n      makeAPICall(term).then((res) => {\n        // console.log(res, \"what is in res?\");\n        let results = res.data.results;\n        results.map((pin) => {\n          // console.log(\"what is in pin\", pin);\n          searchedPins.push(pin);\n        });\n      })\n    );\n    Promise.all(promises).then(() => {\n      // console.log(searchedPins, \"What is in searched pins?\");\n      setNewPins(searchedPins);\n    });\n  };\n\n  const getNewPins = () => {\n    let promises = [];\n    let pinData = [];\n\n    db.collection(\"terms\").onSnapshot((snapshot) => {\n      let snapshotData = snapshot.docs;\n\n      if (snapshotData.length >= 10) snapshotData = snapshotData.slice(-5);\n\n      snapshotData.map((doc) => {\n        promises.push(\n          makeAPICall(doc.data().term).then((res) => {\n            let results = res.data.results;\n            results.map((obj) => {\n              pinData.push(obj);\n            });\n\n            pinData.sort((a, b) => 0.5 - Math.random());\n          })\n        );\n      });\n\n      Promise.all(promises).then(() => {\n        setNewPins(pinData);\n      });\n    });\n  };\n\n  useEffect(() => {\n    getNewPins();\n  }, []);\n\n  // console.log(pins, \"what is in pins ?\");\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <Header onSubmit={onSearchSubmit} />\n      </div>\n      <div className=\"app__body\">\n        <Mainboard pins={pins} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\Header.js",[],"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\index.js",[],"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\Mainboard.js",[],"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\Pin.js",[],"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\firebase.js",[],"C:\\Users\\PAL\\Desktop\\react-call\\pinterest\\pinterest-clone\\src\\api\\unsplash.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":26,"column":27,"nodeType":"48","messageId":"49","endLine":26,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":47,"column":30,"nodeType":"48","messageId":"49","endLine":47,"endColumn":32},{"ruleId":"46","severity":1,"message":"47","line":51,"column":31,"nodeType":"48","messageId":"49","endLine":51,"endColumn":33},{"ruleId":"50","severity":1,"message":"51","line":68,"column":6,"nodeType":"52","endLine":68,"endColumn":8,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNewPins'. Either include it or remove the dependency array.","ArrayExpression",["56"],"no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},"Update the dependencies array to be: [getNewPins]",{"range":"59","text":"60"},[1733,1735],"[getNewPins]"]